// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client" // Optional: for future Prisma versions
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // App-level UUID generation
  email     String   @unique
  name      String?
  role      String   @default("Rep")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedContacts Contact[] @relation("ContactOwner")
  notes         Note[]    @relation("NoteAuthor")
  assignedTasks Task[]    @relation("TaskAssignee") // Relation for tasks assigned to this user

  @@map("User")
}

model Contact {
  id              String   @id // App-level UUID generation
  firstName       String
  lastName        String
  email           String   @unique
  phone           String?
  mobilePhone     String?
  officePhone     String?
  otherPhone      String?
  company         String?
  tags            String[] @default([])
  lead_status     String?  @default("New")
  contactType     String?  @default("Primary")
  businessAddress String?
  businessCity    String?
  businessZip     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ownerId String?
  owner   User?    @relation("ContactOwner", fields: [ownerId], references: [id])

  notes Note[] @relation("ContactNotes")
  deals Deal[] @relation("DealContacts")
  tasks Task[] @relation("TaskContact") // Tasks related to this contact

  @@index([ownerId])
  @@index([email])
  @@index([lead_status])
  @@map("Contact")
}

model Note {
  id        String   @id // App-level UUID generation
  content   String
  timestamp DateTime @default(now())

  authorId String
  author   User   @relation("NoteAuthor", fields: [authorId], references: [id])

  contactId String?
  contact   Contact? @relation("ContactNotes", fields: [contactId], references: [id])

  dealId String?
  deal   Deal?   @relation("DealNotes", fields: [dealId], references: [id])

  taskId String? // Foreign key for Task
  task   Task?   @relation("TaskNotes", fields: [taskId], references: [id]) // Relation to Task

  @@index([authorId])
  @@index([contactId])
  @@index([dealId])
  @@index([taskId]) // Add index for taskId
  @@map("Note")
}

model Deal {
  id                String    @id // App-level UUID generation
  name              String
  value             Float?
  stage             String
  expectedCloseDate DateTime?
  dealType          String?
  priority          String?
  nextStep          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  ownerId String?
  // owner User? @relation(...) // TODO: Implement owner relation for Deals

  contacts Contact[] @relation("DealContacts")

  notes       Note[]       @relation("DealNotes")
  submissions Submission[] @relation("DealSubmissions")
  tasks       Task[]       @relation("TaskDeal") // Tasks related to this deal

  // @@index([ownerId])
  @@index([stage])
  @@map("Deal")
}

model Task {
  id         String    @id // App-level UUID generation
  title      String
  description String?   // Optional longer description for the task
  dueDate    DateTime?
  status     String    @default("Pending") // e.g., Pending, In Progress, Completed, Deferred
  priority   String?   // e.g., High, Medium, Low
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relation to User (who is this task assigned to?)
  assignedToId String?   // Foreign key for User
  assignedUser User?     @relation("TaskAssignee", fields: [assignedToId], references: [id])

  // Relation to Contact (optional)
  contactId  String?
  contact    Contact?  @relation("TaskContact", fields: [contactId], references: [id])

  // Relation to Deal (optional)
  dealId     String?
  deal       Deal?     @relation("TaskDeal", fields: [dealId], references: [id])

  // Inverse relation for Notes
  notes      Note[]    @relation("TaskNotes")

  @@index([assignedToId])
  @@index([contactId])
  @@index([dealId])
  @@index([status])
  @@index([priority])
  @@map("Task")
}

model Submission {
  id              String    @id // App-level UUID generation
  lender_name     String
  submission_date DateTime?
  status          String    @default("Submitted")
  approval_date   DateTime?
  approval_amount Float?
  approval_term   String?
  approval_rate   Float?
  stipulations    String?
  approval_link   String?
  decline_reason  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  dealId String
  deal   Deal   @relation("DealSubmissions", fields: [dealId], references: [id])

  @@index([dealId])
  @@index([status])
  @@map("Submission")
}
